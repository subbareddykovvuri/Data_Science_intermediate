Basics of Time and Space Complexity
===================================
**********************************************************************************************************************

* List Comprehension
  -Nested List comprehension

* Strings
  - Some special string functions
  - converting string to list
  - Flattening the List

* Python memory
* Time Complexity
  - Big O
* Sorting Algorithms
  - Bubble Sort

**********************************************************************************************************************

1. Intersection = Common elements
2. Difference = elements present only in 1 set
3. Symmetric Difference = ignore common

* Sets can only contain immutable Data Structure

s = {1,2,3,"amit",[2,3,4]}
Will get error as the list is muttable

s = {1,2,3,"amit",(2,3,4)}
It will work

a=[1,2,3,4,5,6]
print(id(a)) --> 136395233554112

a.append(7)
print(id(a)) --> 136395233554112

As the list is muttable when the elements are added or removed (list is modified) the address wont be changed

a.append([8,9,10])
print(a) --> [1,2,3,4,5,6,7,[8,9,10]]
print(id(a)) --> 136395233554112

Here also the values address wont be changed


*Removing elements from List
  - pop => Removes the last element by default
	   Remove the value using index
  - remove => Remove the value using the value



a=[1,2,3,4,5,6,7]

a.pop()
print(a) --> [1,2,3,4,5,6]

a.remove(4)
print(a) --> [1,2,3,5,6]

a.remove(8) --> will get value error




List Comprehension
====================
 - It is a way to create consie list in python.
 - List comprehension are slightly faster than for loops.

# for loop
a=[1,2,3,4,5,6,7]
b=[]
for i in a:
  b.append(i*2)

--> [2 4 6 8 10 12]

# List comprehension
my_numbers = [i*2 for i in a]
print(my_numbers)
--> [2 4 6 8 10 12]


# Task 2: Given a list, create another list whose elements satisfy the following condition
# i**2 if i is odd
# i if i is even

a=[1,2,3,4,5,6,7,8,9,10]
my_numbers = [i**2 if i%2!=0 else i for i in a]
--> [1, 2, 9, 4, 25, 6, 49, 8, 81, 10]



# only print even values from list

a=[1,2,3,4,5,6,7,8,9,10]
my_numbers = [i for i in a if i%2==0]
--> [2, 4, 6, 8, 10]


print( [i if i%2 == 0 for i in a])
SyntaxError: expected 'else' after 'if' expression

 
syntax:
if else condition
[if_value if condition else else_values for value in array]

if condition
[if_value for value in array if condition]






Nested List Comprehension
===================================

l=[list1, list2]


************************************
random = [i+j for j in range(1,11) for i in range(1,11)]

print(random) --> [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

************************************


************************************
random = [str(i)+(j) for i in [1,2,3] for j in ['a','b','c']]

print(random) --> ['1a', '1b', '1c', '2a', '2b', '2c', '3a', '3b', '3c']

************************************


***********************************

print([ i+j+k for k in ["I"] for j in ["am"] for i in ["weird"] ])

--> ['weirdamI']
************************************


************************************
for i in [1,2,3]:
    for j in ['a','b','c']:
        print(str(i)+j)

      
1a
1b
1c
2a
2b
2c
3a
3b
3c
**************************************


Python Memory:
===============

b=[[""]*3]*3


      b[0]          b[1]          b[2]
[['', '', ''], ['', '', ''], ['', '', '']]
  [0] [1] [2]    [0] [1] [2]   [0] [1] [2]


print(id(b[0]) == id(b[1]) == id(b[2])) # True

print(id(b[0][1]) == id(b[1][0]) == id(b[2][1])) # True







**********************************************************************************************************************

Time Complexity
=================
  is a measure of the efficiency of an algorithm, describing the relationship or tr between no of operations performed by algorithm and  of its input


***************************
def fun(N):
  s=0
  for i in range(1,N+1)
    s+=1
fun(10) -> loop will run (1,11) -> N iterations

=====
O(N)

***************************


****************************
def fun(N):
  s=0
  for i in range(1,N+1)
    s+=1
  for i in range(1,M+1)
    s+=1
  return s

======
O(N+M)
*****************************


*****************************
def fun(N):
  i=1
  while i<N:
    i += 2

======
O(N/2) constants will be ignored need to represent only O(N)
*****************************

*****************************
def fun(N):
  s=0
  for i in range(1,101)
    s+=i
  return s

==========
O(1)
******************************


*******************************
def fun(N):
  s=0
  for i in range(1,N**0.5)
    s+=i
  return s

================
O(squareroot(N))
*******************************


********************************
def fun(N):
  i=N
  while i>=1
    i = i//2

fun(10) # It will run 3 times
N/(2**k) = 1

N=2**k
log2(N) =K(

*******************************

***********************************
def fun(N):
  i=0
  while i<N:
    i += 2

===========
infinite loop
**********************************

***********************************
def binary_search(arr, target):
  left,right = 0,len(arr)-1
  while left<=right:
    mid = (left+right) // 2
    if arr[mid]==target:
       return mid
    elif arr[mid]<target:
       left = mid+1
    else:
  	right = mid-1
   return -1


==========
O(logN)
***********************************

***********************************
def count_digits(n):
  count = 0
  while n>0:
    n//=10 #drop last digit
    count += 1
  print("Digits:",count)

=======
1234->123->12->1->0  (4 times it executed)

O(logN)
***************************************

*********************************
def fun(N):
  for i in range(10):
    for j in range(N):
      s+=j
  return s

==========
O(N)
*********************************


**************************************
def fun(N):
  s=0
  for i in range(N):
    j=1
    while j<=N:
      j = j * 2
  return s

========
O(NlogN)
****************************************











































